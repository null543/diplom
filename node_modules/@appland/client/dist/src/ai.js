"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const socket_io_client_1 = require("socket.io-client");
const aiClient_1 = __importDefault(require("./aiClient"));
const loadConfiguration_1 = require("./loadConfiguration");
// eslint-disable-next-line unicorn/no-static-only-class
class AI {
    static async connect(callbacks) {
        const configuration = (0, loadConfiguration_1.getConfiguration)();
        const socket = (0, socket_io_client_1.io)(configuration.apiURL.replace(/^http/, 'ws'), {
            transports: ['websocket'],
            path: '/v1/ai/conversation',
            reconnection: false,
            auth: {
                token: configuration.apiKey,
            },
        });
        return new Promise((resolve, reject) => {
            socket.on('connect', () => {
                resolve(new aiClient_1.default(socket, callbacks));
            });
            socket.on('connect_error', (error) => {
                reject(error);
            });
        });
    }
    static async sendMessageFeedback(messageId, sentiment) {
        const configuration = (0, loadConfiguration_1.getConfiguration)();
        if (!configuration.apiKey) {
            throw new Error('Authentication is required to send feedback');
        }
        const response = await fetch(`${configuration.apiURL}/v1/ai/feedback`, {
            method: 'POST',
            headers: {
                Authorization: `Bearer ${configuration.apiKey}`,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                messageId,
                sentiment,
            }),
        });
        if (!response.ok) {
            throw new Error('Failed to send feedback');
        }
    }
}
exports.default = AI;
//# sourceMappingURL=ai.js.map