"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const openai_1 = require("@langchain/openai");
const SYSTEM_PROMPT = `**Question classifier**

You are assisting a developer to classify a question. The developer asks a question using natural language. 
There are several types of questions that the developer may be asking. 

Your task is to assign a likelihood to each of the following question types:

- **Help with AppMap**: The developer is asking for help using the AppMap product.
- **Project architecture**: The developer is asking about the high level architecture of their project.
- **Explaining code**: The developer is asking for an explanation of how a specific feature of their project works.
- **Generating code**: The developer is asking for code to be generated for a specific task.

**Classification scores**

Each question type is assigned one of the following likelihoods:

- **High**: The question is very likely to be of this type.
- **Medium**: The question is somewhat likely to be of this type.
- **Low**: The question is unlikely to be of this type.

**Response**

Respond with a list of question types and their likelihoods. The question types should be one of the following: 'Help with AppMap', 
'Project architecture', 'Explaining code', 'Generating code'. The likelihoods should be one of the following: 'High', 'Medium', 'Low'.

**Example**

Some examples of questions and their classifications are:

\`\`\`
Question: How do I install?
Classification: Help with AppMap (High)
Classification: Project architecture (Low)
Classification: Explaining code (Low)
Classification: Generating code (Low)
\`\`\`

\`\`\`
Question: How does the project work?
Classification: Help with AppMap (Low)
Classification: Project architecture (High)
Classification: Explaining code (Low)
Classification: Generating code (Low)
\`\`\`

\`\`\`
Question: Generate a new user
Classification: Help with AppMap (Low)
Classification: Project architecture (Low)
Classification: Explaining code (Low)
Classification: Generating code (High)
\`\`\`
`;
class ClassificationService {
    constructor(interactionHistory, modelName, temperature) {
        this.interactionHistory = interactionHistory;
        this.modelName = modelName;
        this.temperature = temperature;
    }
    classifyQuestion(question) {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const openAI = new openai_1.ChatOpenAI({
                modelName: this.modelName,
                temperature: this.temperature,
            });
            const messages = [
                {
                    content: SYSTEM_PROMPT,
                    role: 'system',
                },
                {
                    content: question,
                    role: 'user',
                },
            ];
            // eslint-disable-next-line no-await-in-loop
            const response = yield openAI.completionWithRetry({
                messages,
                model: openAI.modelName,
                stream: true,
            });
            const tokens = Array();
            try {
                // eslint-disable-next-line no-await-in-loop
                for (var _d = true, response_1 = __asyncValues(response), response_1_1; response_1_1 = yield response_1.next(), _a = response_1_1.done, !_a;) {
                    _c = response_1_1.value;
                    _d = false;
                    try {
                        const token = _c;
                        tokens.push(token.choices.map((choice) => choice.delta.content).join(''));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = response_1.return)) yield _b.call(response_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            const rawTerms = tokens.join('');
            return rawTerms;
        });
    }
}
exports.default = ClassificationService;
