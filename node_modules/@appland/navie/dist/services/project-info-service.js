"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const interaction_history_1 = require("../interaction-history");
const prompt_1 = require("../prompt");
class ProjectInfoService {
    constructor(interactionHistory, projectInfoProvider) {
        this.interactionHistory = interactionHistory;
        this.projectInfoProvider = projectInfoProvider;
    }
    lookupProjectInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.projectInfoProvider({ type: 'projectInfo' });
            if (!response) {
                this.interactionHistory.log('No project info found');
                return [];
            }
            const projectInfo = Array.isArray(response) ? response : [response];
            this.interactionHistory.log('Project info obtained');
            const projectInfoKeys = [
                [
                    prompt_1.PromptType.AppMapConfig,
                    'appmapConfig',
                    () => projectInfo.some(({ appmapConfig }) => Boolean(appmapConfig)),
                    `The project does not contain an AppMap config file (appmap.yml).`,
                ],
                [
                    prompt_1.PromptType.AppMapStats,
                    'appmapStats',
                    () => projectInfo.some(({ appmapStats }) => appmapStats.numAppMaps > 0),
                    `The project does not contain any AppMaps.`,
                ],
            ];
            projectInfoKeys.forEach(([promptType, projectInfoKey, isPresent, missingInfoMessage]) => {
                if (!isPresent()) {
                    this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(promptType, 'user', missingInfoMessage));
                    return;
                }
                const promptValue = projectInfo.map((info) => {
                    var _a;
                    let value = info[projectInfoKey];
                    const hasName = 'name' in info;
                    if (!hasName && ((_a = info.appmapConfig) === null || _a === void 0 ? void 0 : _a.name)) {
                        value = Object.assign(Object.assign({}, value), { name: info.appmapConfig.name });
                    }
                    return value;
                });
                this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(promptType, 'system', (0, prompt_1.buildPromptDescriptor)(promptType)));
                this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(promptType, 'user', (0, prompt_1.buildPromptValue)(promptType, JSON.stringify(promptValue))));
            });
            return projectInfo;
        });
    }
}
exports.default = ProjectInfoService;
