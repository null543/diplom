"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const console_1 = require("console");
const interaction_history_1 = require("../interaction-history");
const message_1 = require("../message");
class LookupContextService {
    constructor(interactionHistory, contextFn, helpFn) {
        this.interactionHistory = interactionHistory;
        this.contextFn = contextFn;
        this.helpFn = helpFn;
    }
    lookupContext(vectorTerms, tokenCount) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const context = yield this.contextFn({
                type: 'search',
                vectorTerms,
                tokenCount,
            });
            const contextFound = ((_a = context === null || context === void 0 ? void 0 : context.sequenceDiagrams) === null || _a === void 0 ? void 0 : _a.length) > 0;
            if (contextFound) {
                this.interactionHistory.addEvent(new interaction_history_1.ContextLookupEvent(context));
            }
            else {
                (0, console_1.log)('No sequence diagrams found');
                this.interactionHistory.addEvent(new interaction_history_1.ContextLookupEvent(undefined));
            }
            return context;
        });
    }
    lookupHelp(languages, vectorTerms, tokenCount) {
        return __awaiter(this, void 0, void 0, function* () {
            const help = yield this.helpFn({
                type: 'help',
                vectorTerms: [...languages, ...vectorTerms],
                tokenCount,
            });
            const helpFound = (help === null || help === void 0 ? void 0 : help.length) > 0;
            if (helpFound) {
                this.interactionHistory.addEvent(new interaction_history_1.HelpLookupEvent(help));
            }
            else {
                (0, console_1.log)('No help found');
                this.interactionHistory.addEvent(new interaction_history_1.HelpLookupEvent(undefined));
            }
            return help;
        });
    }
    static applyContext(context, help, applyContextService, tokenCount) {
        applyContextService.addSystemPrompts(context, help);
        applyContextService.applyContext(context, help, tokenCount * message_1.CHARACTERS_PER_TOKEN);
    }
}
exports.default = LookupContextService;
