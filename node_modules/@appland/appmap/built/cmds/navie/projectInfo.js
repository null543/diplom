"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stats_1 = require("../../rpc/appmap/stats");
const configuration_1 = __importDefault(require("../../rpc/configuration"));
async function collectProjectInfos() {
    const projectInfoByPath = {};
    const appmapConfigs = await (0, configuration_1.default)().configs();
    const appmapStats = await (0, stats_1.collectStats)(appmapConfigs);
    appmapStats.forEach((stats) => {
        const { directory } = stats;
        // KG: This is verbose and I don't see the utility of it
        delete stats.classes;
        delete stats.path;
        projectInfoByPath[directory] = { appmapConfig: undefined, appmapStats: stats };
    });
    appmapConfigs.forEach((config) => {
        var _a, _b;
        projectInfoByPath[config.directory].appmapConfig = {
            name: config.name,
            language: (_a = config.language) !== null && _a !== void 0 ? _a : 'unknown',
            appmap_dir: (_b = config.appmap_dir) !== null && _b !== void 0 ? _b : 'tmp/appmap',
            packages: config.packages,
        };
    });
    // It's good when results are stable.
    return Object.values(projectInfoByPath).sort((a, b) => { var _a, _b; return (((_a = a.appmapConfig) === null || _a === void 0 ? void 0 : _a.name) || '').localeCompare(((_b = b.appmapConfig) === null || _b === void 0 ? void 0 : _b.name) || ''); });
}
exports.default = collectProjectInfos;
//# sourceMappingURL=projectInfo.js.map