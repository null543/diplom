"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.describe = exports.command = void 0;
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("../../utils");
const console_1 = require("console");
const search_1 = require("../../rpc/search/search");
const filter_1 = __importDefault(require("../../rpc/appmap/filter"));
const metadata_1 = __importDefault(require("../../rpc/appmap/metadata"));
const sequenceDiagram_1 = __importDefault(require("../../rpc/appmap/sequenceDiagram"));
const explain_1 = require("../../rpc/explain/explain");
const rpcServer_1 = __importDefault(require("./rpcServer"));
const data_1 = __importDefault(require("../../rpc/appmap/data"));
const stats_1 = require("../../rpc/appmap/stats");
const navie_local_1 = __importDefault(require("../../rpc/explain/navie/navie-local"));
const navie_remote_1 = __importDefault(require("../../rpc/explain/navie/navie-remote"));
const handleWorkingDirectory_1 = require("../../lib/handleWorkingDirectory");
const client_1 = require("@appland/client");
const configuration_1 = require("../../rpc/configuration");
const navie_1 = require("@appland/navie");
const AI_KEY_ENV_VARS = ['OPENAI_API_KEY', 'AZURE_OPENAI_API_KEY'];
exports.command = 'rpc';
exports.describe = 'Run AppMap JSON-RPC server';
const builder = (args) => {
    args.option('directory', {
        describe: 'program working directory',
        type: 'string',
        alias: 'd',
        array: true,
    });
    args.option('port', {
        describe: 'port to listen on for JSON-RPC requests. Use port 0 to let the OS choose a port. The port number will be printed to stdout on startup.',
        type: 'number',
        alias: 'p',
    });
    args.option('navie-provider', {
        describe: 'navie provider to use',
        type: 'string',
        choices: ['local', 'remote'],
    });
    args.option('log-navie', {
        describe: 'Log Navie events to stderr',
        boolean: true,
        default: false,
    });
    args.option('ai-option', {
        describe: 'Specify an extended option to the AI provider, in the form of a key=value pair. May be repeated.',
        type: 'string',
        array: true,
    });
    args.option('agent-mode', {
        describe: `Agent mode which to run the Navie AI. The agent can also be controlled by starting the question with '@<agent> '.`,
        choices: Object.values(navie_1.Agents).map((agent) => agent.toLowerCase()),
    });
    return args.strict();
};
exports.builder = builder;
const handler = async (argv) => {
    (0, utils_1.verbose)(argv.verbose);
    let directories = [];
    if (argv.directory) {
        Array.isArray(argv.directory)
            ? directories.push(...argv.directory)
            : directories.push(argv.directory);
    }
    const { port, logNavie } = argv;
    let aiOptions = argv.aiOption;
    if (aiOptions) {
        aiOptions = Array.isArray(aiOptions) ? aiOptions : [aiOptions];
    }
    let agentModeStr = argv.explainMode;
    let agentMode;
    if (agentModeStr)
        agentMode = agentModeStr;
    const useLocalNavie = () => {
        if (argv.navieProvider === 'local') {
            (0, console_1.log)(`Using local Navie provider due to explicit --navie-provider=local option`);
            return true;
        }
        if (argv.navieProvider === 'remote') {
            (0, console_1.log)(`Using remote Navie provider due to explicit --navie-provider=remote option`);
            return false;
        }
        const aiEnvVar = Object.keys(process.env).find((key) => AI_KEY_ENV_VARS.includes(key));
        if (aiEnvVar) {
            (0, console_1.log)(`Using local Navie provider due to presence of environment variable ${aiEnvVar}`);
            return true;
        }
        (0, console_1.log)(`--navie-provider option not provided, and none of ${AI_KEY_ENV_VARS.join(' ')} are available. Using remote Navie provider.`);
        return false;
    };
    const applyAIOptions = (navie) => {
        if (aiOptions) {
            for (const option of aiOptions) {
                const [key, value] = option.split('=');
                if (key && value) {
                    navie.setOption(key, value);
                }
            }
        }
        if (agentMode) {
            navie.setOption('explainMode', agentMode);
        }
    };
    const buildLocalNavie = (threadId, contextProvider, projectInfoProvider, helpProvider) => {
        const navie = new navie_local_1.default(threadId, contextProvider, projectInfoProvider, helpProvider);
        applyAIOptions(navie);
        let START;
        const logEvent = (event) => {
            if (!logNavie)
                return;
            if (!START)
                START = Date.now();
            const elapsed = Date.now() - START;
            process.stderr.write(chalk_1.default.gray(`${elapsed}ms `));
            process.stderr.write(chalk_1.default.gray(event.message));
            process.stderr.write(chalk_1.default.gray('\n'));
        };
        navie.on('event', logEvent);
        return navie;
    };
    const buildRemoteNavie = (threadId, contextProvider, projectInfoProvider, helpProvider) => {
        (0, client_1.loadConfiguration)(false);
        const navie = new navie_remote_1.default(threadId, contextProvider, projectInfoProvider, helpProvider);
        applyAIOptions(navie);
        return navie;
    };
    const navieProvider = useLocalNavie() ? buildLocalNavie : buildRemoteNavie;
    (0, handleWorkingDirectory_1.configureRpcDirectories)(directories);
    const rpcMethods = [
        (0, search_1.search)(),
        (0, stats_1.appmapStatsV1)(),
        (0, stats_1.appmapStatsV2)(),
        (0, filter_1.default)(),
        (0, data_1.default)(),
        (0, metadata_1.default)(),
        (0, sequenceDiagram_1.default)(),
        (0, explain_1.explainHandler)(navieProvider),
        (0, explain_1.explainStatusHandler)(),
        (0, configuration_1.setConfigurationV1)(),
        (0, configuration_1.getConfigurationV1)(),
    ];
    const rpcServer = new rpcServer_1.default(port, rpcMethods);
    rpcServer.start();
};
exports.handler = handler;
//# sourceMappingURL=rpc.js.map