"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigurationV1 = exports.setConfigurationV1 = exports.Configuration = void 0;
const rpc_1 = require("@appland/rpc");
const path_1 = require("path");
const loadAppMapConfig_1 = __importDefault(require("../lib/loadAppMapConfig"));
class Configuration {
    constructor(appmapConfigFiles = []) {
        this.appmapConfigFiles = appmapConfigFiles;
    }
    get directories() {
        return this.appmapConfigFiles.map(path_1.dirname);
    }
    async appmapDirs() {
        return (await Promise.all(this.appmapConfigFiles.map(async (file) => {
            var _a;
            const appmapDir = (_a = (await (0, loadAppMapConfig_1.default)(file))) === null || _a === void 0 ? void 0 : _a.appmap_dir;
            if (appmapDir)
                return (0, path_1.join)((0, path_1.dirname)(file), appmapDir);
        }))).filter(Boolean);
    }
    async configs() {
        return (await Promise.all(this.appmapConfigFiles.map(async (file) => {
            const config = await (0, loadAppMapConfig_1.default)(file);
            if (config)
                return Object.assign(Object.assign({}, config), { directory: (0, path_1.dirname)(file) });
        }))).filter(Boolean);
    }
}
exports.Configuration = Configuration;
let config = new Configuration();
function configuration() {
    return config;
}
exports.default = configuration;
function setConfigurationV1() {
    return {
        name: rpc_1.ConfigurationRpc.V1.Set.Method,
        handler: ({ appmapConfigFiles }) => {
            config = new Configuration(appmapConfigFiles);
            return undefined;
        },
    };
}
exports.setConfigurationV1 = setConfigurationV1;
function getConfigurationV1() {
    return {
        name: rpc_1.ConfigurationRpc.V1.Get.Method,
        handler: () => ({ appmapConfigFiles: config.appmapConfigFiles }),
    };
}
exports.getConfigurationV1 = getConfigurationV1;
//# sourceMappingURL=configuration.js.map