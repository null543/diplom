"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const console_1 = require("console");
const events_1 = __importDefault(require("events"));
const client_1 = require("@appland/client");
const utils_1 = require("../../../utils");
class RemoteNavie extends events_1.default {
    constructor(threadId, contextProvider, projectInfoProvider, helpProvider) {
        super();
        this.threadId = threadId;
        this.contextProvider = contextProvider;
        this.projectInfoProvider = projectInfoProvider;
        this.helpProvider = helpProvider;
    }
    setOption(key, _value) {
        throw new Error(`RemoteNavie does not support option '${key}'`);
    }
    async ask(question, codeSelection) {
        const self = this;
        (await client_1.AI.connect({
            onAck(userMessageId, threadId) {
                if ((0, utils_1.verbose)())
                    (0, console_1.warn)(`Explain received ack (userMessageId=${userMessageId}, threadId=${threadId})`);
                self.emit('ack', userMessageId, threadId);
            },
            onToken(token, _messageId) {
                self.emit('token', token);
            },
            async onRequestContext(data) {
                try {
                    if (data.type === 'search') {
                        return await self.contextProvider(data);
                    }
                    if (data.type === 'projectInfo') {
                        return ((await self.projectInfoProvider(data)) || {});
                    }
                    if (data.type === 'help') {
                        return (await self.helpProvider(data)) || {};
                    }
                    else {
                        (0, console_1.warn)(`Unhandled context request type: ${data.type}`);
                        // A response is required from this function.
                        return {};
                    }
                }
                catch (e) {
                    (0, console_1.warn)(`Explain context function ${data} threw an error: ${e}`);
                    // TODO: Report an error object instead?
                    return {};
                }
            },
            onComplete() {
                if ((0, utils_1.verbose)())
                    (0, console_1.warn)(`Explain is complete`);
                self.emit('complete');
            },
            onError(err) {
                if ((0, utils_1.verbose)())
                    (0, console_1.warn)(`Error handled by Explain: ${err}`);
                self.emit('error', err);
            },
        })).inputPrompt({ question: question, codeSelection: codeSelection }, { threadId: self.threadId, tool: 'explain' });
    }
}
exports.default = RemoteNavie;
//# sourceMappingURL=navie-remote.js.map