"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.search = exports.handler = exports.DEFAULT_MAX_EVENTS_PER_DIAGRAM = exports.DEFAULT_MAX_DIAGRAMS = void 0;
const rpc_1 = require("@appland/rpc");
const AppMapIndex_1 = __importDefault(require("../../fulltext/AppMapIndex"));
const searchSingleAppMap_1 = __importDefault(require("../../cmds/search/searchSingleAppMap"));
const configuration_1 = __importDefault(require("../configuration"));
const path_1 = require("path");
exports.DEFAULT_MAX_DIAGRAMS = 10;
exports.DEFAULT_MAX_EVENTS_PER_DIAGRAM = 100;
async function handler(query, appmaps, options) {
    const config = (0, configuration_1.default)();
    const { directories } = config;
    let appmapSearchResponse;
    if (appmaps) {
        const results = appmaps
            .map((appmap) => {
            let directory;
            if (directories.length === 1)
                directory = directories[0];
            else
                directory = directories.find((dir) => appmap.startsWith(dir));
            if (!directory)
                return undefined;
            const appmapId = (0, path_1.isAbsolute)(appmap) ? appmap : (0, path_1.join)(directory, appmap);
            return {
                appmap: appmapId,
                directory,
                score: 1,
            };
        })
            .filter(Boolean);
        appmapSearchResponse = {
            type: 'appmap',
            stats: {
                max: 1,
                mean: 1,
                median: 1,
                stddev: 0,
            },
            results,
            numResults: appmaps.length,
        };
    }
    else {
        // Search across all AppMaps, creating a map from AppMap id to AppMapSearchResult
        const searchOptions = {
            maxResults: options.maxDiagrams || options.maxResults || exports.DEFAULT_MAX_DIAGRAMS,
        };
        appmapSearchResponse = await AppMapIndex_1.default.search(directories, query, searchOptions);
    }
    // For each AppMap, search for events within the map that match the query.
    const results = new Array();
    for (const result of appmapSearchResponse.results) {
        const searchOptions = {
            maxResults: options.maxEventsPerDiagram || options.maxResults || exports.DEFAULT_MAX_EVENTS_PER_DIAGRAM,
        };
        let appmap = result.appmap;
        if (!(0, path_1.isAbsolute)(appmap))
            appmap = (0, path_1.join)(result.directory, appmap);
        const eventsSearchResponse = await (0, searchSingleAppMap_1.default)(appmap, query, searchOptions);
        results.push({
            appmap,
            directory: result.directory,
            events: eventsSearchResponse.results.map((event) => {
                delete event.appmap;
                return event;
            }),
            score: result.score,
        });
    }
    return {
        results,
        numResults: appmapSearchResponse.numResults,
    };
}
exports.handler = handler;
function search() {
    return {
        name: rpc_1.SearchRpc.FunctionName,
        handler: (args) => handler(args.query, args.appmaps, args),
    };
}
exports.search = search;
//# sourceMappingURL=search.js.map